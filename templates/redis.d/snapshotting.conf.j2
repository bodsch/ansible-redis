#jinja2: trim_blocks: True, lstrip_blocks: True
# {{ ansible_managed }}
################################ SNAPSHOTTING  ################################
#
# Save the DB on disk:
#
#   save <seconds> <changes>
#
#   Will save the DB if both the given number of seconds and the given
#   number of write operations against the DB occurred.
#
#   In the example below the behaviour will be to save:
#   after 900 sec (15 min) if at least 1 key changed
#   after 300 sec (5 min) if at least 10 keys changed
#   after 60 sec if at least 10000 keys changed
#
#   Note: you can disable saving completely by commenting out all "save" lines.
#
#   It is also possible to remove all the previously configured save
#   points by adding a save directive with a single empty string argument
#   like in the following example:
#
#   save ""

# save 900 1
# save 300 10
# save 60 10000

{% if redis_snapshot.save is defined and
      redis_snapshot.save | count > 0 %}
  {% for save in redis_snapshot.save %}
save {{ save }}
  {% endfor %}
{% endif %}

{% if stop_writes_on_bgsave_error.rdbcompression is defined %}
# By default Redis will stop accepting writes if RDB snapshots are enabled
# (at least one save point) and the latest background save failed.
# This will make the user aware (in a hard way) that data is not persisting
# on disk properly, otherwise chances are that no one will notice and some
# disaster will happen.
#
# If the background saving process will start working again Redis will
# automatically allow writes again.
#
# However if you have setup your proper monitoring of the Redis server
# and persistence, you may want to disable this feature so that Redis will
# continue to work as usual even if there are problems with disk,
# permissions, and so forth.
stop-writes-on-bgsave-error {{ stop_writes_on_bgsave_error.rdbcompression | default('true') | bool | ternary('yes', 'no')  }}
{% endif %}

{% if redis_snapshot.rdbcompression is defined %}
# Compress string objects using LZF when dump .rdb databases?
# For default that's set to 'yes' as it's almost always a win.
# If you want to save some CPU in the saving child set it to 'no' but
# the dataset will likely be bigger if you have compressible values or keys.
rdbcompression {{ redis_snapshot.rdbcompression | default('false') | bool | ternary('yes', 'no')  }}
{%endif %}

{% if redis_snapshot.rdbchecksum is defined %}
# Since version 5 of RDB a CRC64 checksum is placed at the end of the file.
# This makes the format more resistant to corruption but there is a performance
# hit to pay (around 10%) when saving and loading RDB files, so you can disable it
# for maximum performances.
#
# RDB files created with checksum disabled have a checksum of zero that will
# tell the loading code to skip the check.
rdbchecksum {{ redis_snapshot.rdbchecksum | default('true') | bool | ternary('yes', 'no')  }}
{% endif %}

{% if redis_snapshot.dbfilename is defined and
      redis_snapshot.dbfilename | string | length > 0 %}
# The filename where to dump the DB
dbfilename {{ redis_snapshot.dbfilename }}
{% endif %}

{% if redis_snapshot.dir is defined and
      redis_snapshot.dir | string | length > 0 %}
# The working directory.
#
# The DB will be written inside this directory, with the filename specified
# above using the 'dbfilename' configuration directive.
#
# The Append Only File will also be created inside this directory.
#
# Note that you must specify a directory here, not a file name.
# dir /var/lib/redis
dir {{ redis_snapshot.dir }}
{% endif %}
